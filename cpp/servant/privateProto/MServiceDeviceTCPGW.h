// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

#ifndef __MSERVICEDEVICETCPGW_H_
#define __MSERVICEDEVICETCPGW_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
using namespace std;
#include "BaseDefine.h"
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace LSFreeIP
{

    /* callback of async proxy for client */
    class MServiceDeviceTCPGWPrxCallback: public tars::ServantProxyCallback
    {
    public:
        virtual ~MServiceDeviceTCPGWPrxCallback(){}
        virtual void callback_RPCGetDevicesList(tars::Int32 ret,  const vector<Base::ClientInfo>& clis)
        { throw std::runtime_error("callback_RPCGetDevicesList() override incorrect."); }
        virtual void callback_RPCGetDevicesList_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_RPCGetDevicesList_exception() override incorrect."); }

        virtual void callback_RPCGetEndPointInfo(tars::Int32 ret,  const std::string& sRsp)
        { throw std::runtime_error("callback_RPCGetEndPointInfo() override incorrect."); }
        virtual void callback_RPCGetEndPointInfo_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_RPCGetEndPointInfo_exception() override incorrect."); }

        virtual void callback_RPCGetRedirectionURL(tars::Int32 ret,  const Base::CommonResponse& sOut)
        { throw std::runtime_error("callback_RPCGetRedirectionURL() override incorrect."); }
        virtual void callback_RPCGetRedirectionURL_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_RPCGetRedirectionURL_exception() override incorrect."); }

        virtual void callback_RPCTransMessage(tars::Int32 ret,  const Base::CommonResponse& sOut)
        { throw std::runtime_error("callback_RPCTransMessage() override incorrect."); }
        virtual void callback_RPCTransMessage_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_RPCTransMessage_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw TC_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __MServiceDeviceTCPGW_all[]=
            {
                "RPCGetDevicesList",
                "RPCGetEndPointInfo",
                "RPCGetRedirectionURL",
                "RPCTransMessage"
            };
            pair<string*, string*> r = equal_range(__MServiceDeviceTCPGW_all, __MServiceDeviceTCPGW_all+4, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __MServiceDeviceTCPGW_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_RPCGetDevicesList_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    vector<Base::ClientInfo> clis;
                    _is.read(clis, 1, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_RPCGetDevicesList(_ret, clis);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_RPCGetEndPointInfo_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    std::string sRsp;
                    _is.read(sRsp, 1, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_RPCGetEndPointInfo(_ret, sRsp);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_RPCGetRedirectionURL_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    Base::CommonResponse sOut;
                    _is.read(sOut, 4, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_RPCGetRedirectionURL(_ret, sOut);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_RPCTransMessage_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    Base::CommonResponse sOut;
                    _is.read(sOut, 2, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_RPCTransMessage(_ret, sOut);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<MServiceDeviceTCPGWPrxCallback> MServiceDeviceTCPGWPrxCallbackPtr;

    // promise异步
    /* callback of promise async proxy for client */
    class MServiceDeviceTCPGWPrxCallbackPromise: public tars::ServantProxyCallback
    {
    public:
        virtual ~MServiceDeviceTCPGWPrxCallbackPromise(){}
    public:
        struct PromiseRPCGetDevicesList: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            vector<Base::ClientInfo> clis;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< MServiceDeviceTCPGWPrxCallbackPromise::PromiseRPCGetDevicesList > PromiseRPCGetDevicesListPtr;

        MServiceDeviceTCPGWPrxCallbackPromise(const promise::Promise< MServiceDeviceTCPGWPrxCallbackPromise::PromiseRPCGetDevicesListPtr > &promise)
        : _promise_RPCGetDevicesList(promise)
        {}
        
        virtual void callback_RPCGetDevicesList(const MServiceDeviceTCPGWPrxCallbackPromise::PromiseRPCGetDevicesListPtr &ptr)
        {
            _promise_RPCGetDevicesList.setValue(ptr);
        }
        virtual void callback_RPCGetDevicesList_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:RPCGetDevicesList_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_RPCGetDevicesList.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< MServiceDeviceTCPGWPrxCallbackPromise::PromiseRPCGetDevicesListPtr > _promise_RPCGetDevicesList;

    public:
        struct PromiseRPCGetEndPointInfo: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            std::string sRsp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< MServiceDeviceTCPGWPrxCallbackPromise::PromiseRPCGetEndPointInfo > PromiseRPCGetEndPointInfoPtr;

        MServiceDeviceTCPGWPrxCallbackPromise(const promise::Promise< MServiceDeviceTCPGWPrxCallbackPromise::PromiseRPCGetEndPointInfoPtr > &promise)
        : _promise_RPCGetEndPointInfo(promise)
        {}
        
        virtual void callback_RPCGetEndPointInfo(const MServiceDeviceTCPGWPrxCallbackPromise::PromiseRPCGetEndPointInfoPtr &ptr)
        {
            _promise_RPCGetEndPointInfo.setValue(ptr);
        }
        virtual void callback_RPCGetEndPointInfo_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:RPCGetEndPointInfo_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_RPCGetEndPointInfo.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< MServiceDeviceTCPGWPrxCallbackPromise::PromiseRPCGetEndPointInfoPtr > _promise_RPCGetEndPointInfo;

    public:
        struct PromiseRPCGetRedirectionURL: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            Base::CommonResponse sOut;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< MServiceDeviceTCPGWPrxCallbackPromise::PromiseRPCGetRedirectionURL > PromiseRPCGetRedirectionURLPtr;

        MServiceDeviceTCPGWPrxCallbackPromise(const promise::Promise< MServiceDeviceTCPGWPrxCallbackPromise::PromiseRPCGetRedirectionURLPtr > &promise)
        : _promise_RPCGetRedirectionURL(promise)
        {}
        
        virtual void callback_RPCGetRedirectionURL(const MServiceDeviceTCPGWPrxCallbackPromise::PromiseRPCGetRedirectionURLPtr &ptr)
        {
            _promise_RPCGetRedirectionURL.setValue(ptr);
        }
        virtual void callback_RPCGetRedirectionURL_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:RPCGetRedirectionURL_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_RPCGetRedirectionURL.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< MServiceDeviceTCPGWPrxCallbackPromise::PromiseRPCGetRedirectionURLPtr > _promise_RPCGetRedirectionURL;

    public:
        struct PromiseRPCTransMessage: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            Base::CommonResponse sOut;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< MServiceDeviceTCPGWPrxCallbackPromise::PromiseRPCTransMessage > PromiseRPCTransMessagePtr;

        MServiceDeviceTCPGWPrxCallbackPromise(const promise::Promise< MServiceDeviceTCPGWPrxCallbackPromise::PromiseRPCTransMessagePtr > &promise)
        : _promise_RPCTransMessage(promise)
        {}
        
        virtual void callback_RPCTransMessage(const MServiceDeviceTCPGWPrxCallbackPromise::PromiseRPCTransMessagePtr &ptr)
        {
            _promise_RPCTransMessage.setValue(ptr);
        }
        virtual void callback_RPCTransMessage_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:RPCTransMessage_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_RPCTransMessage.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< MServiceDeviceTCPGWPrxCallbackPromise::PromiseRPCTransMessagePtr > _promise_RPCTransMessage;

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __MServiceDeviceTCPGW_all[]=
            {
                "RPCGetDevicesList",
                "RPCGetEndPointInfo",
                "RPCGetRedirectionURL",
                "RPCTransMessage"
            };

            pair<string*, string*> r = equal_range(__MServiceDeviceTCPGW_all, __MServiceDeviceTCPGW_all+4, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __MServiceDeviceTCPGW_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_RPCGetDevicesList_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    MServiceDeviceTCPGWPrxCallbackPromise::PromiseRPCGetDevicesListPtr ptr = new MServiceDeviceTCPGWPrxCallbackPromise::PromiseRPCGetDevicesList();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->clis, 1, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_RPCGetDevicesList_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_RPCGetDevicesList_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_RPCGetDevicesList(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_RPCGetEndPointInfo_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    MServiceDeviceTCPGWPrxCallbackPromise::PromiseRPCGetEndPointInfoPtr ptr = new MServiceDeviceTCPGWPrxCallbackPromise::PromiseRPCGetEndPointInfo();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->sRsp, 1, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_RPCGetEndPointInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_RPCGetEndPointInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_RPCGetEndPointInfo(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_RPCGetRedirectionURL_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    MServiceDeviceTCPGWPrxCallbackPromise::PromiseRPCGetRedirectionURLPtr ptr = new MServiceDeviceTCPGWPrxCallbackPromise::PromiseRPCGetRedirectionURL();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->sOut, 4, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_RPCGetRedirectionURL_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_RPCGetRedirectionURL_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_RPCGetRedirectionURL(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_RPCTransMessage_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    MServiceDeviceTCPGWPrxCallbackPromise::PromiseRPCTransMessagePtr ptr = new MServiceDeviceTCPGWPrxCallbackPromise::PromiseRPCTransMessage();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->sOut, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_RPCTransMessage_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_RPCTransMessage_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_RPCTransMessage(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<MServiceDeviceTCPGWPrxCallbackPromise> MServiceDeviceTCPGWPrxCallbackPromisePtr;

    // 协程异步
    /* callback of coroutine async proxy for client */
    class MServiceDeviceTCPGWCoroPrxCallback: public MServiceDeviceTCPGWPrxCallback
    {
    public:
        virtual ~MServiceDeviceTCPGWCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __MServiceDeviceTCPGW_all[]=
            {
                "RPCGetDevicesList",
                "RPCGetEndPointInfo",
                "RPCGetRedirectionURL",
                "RPCTransMessage"
            };

            pair<string*, string*> r = equal_range(__MServiceDeviceTCPGW_all, __MServiceDeviceTCPGW_all+4, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __MServiceDeviceTCPGW_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_RPCGetDevicesList_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        vector<Base::ClientInfo> clis;
                        _is.read(clis, 1, true);
                        setResponseContext(msg->response.context);

                        callback_RPCGetDevicesList(_ret, clis);

                    }
                    catch(std::exception &ex)
                    {
                        callback_RPCGetDevicesList_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_RPCGetDevicesList_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_RPCGetEndPointInfo_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        std::string sRsp;
                        _is.read(sRsp, 1, true);
                        setResponseContext(msg->response.context);

                        callback_RPCGetEndPointInfo(_ret, sRsp);

                    }
                    catch(std::exception &ex)
                    {
                        callback_RPCGetEndPointInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_RPCGetEndPointInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_RPCGetRedirectionURL_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        Base::CommonResponse sOut;
                        _is.read(sOut, 4, true);
                        setResponseContext(msg->response.context);

                        callback_RPCGetRedirectionURL(_ret, sOut);

                    }
                    catch(std::exception &ex)
                    {
                        callback_RPCGetRedirectionURL_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_RPCGetRedirectionURL_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_RPCTransMessage_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        Base::CommonResponse sOut;
                        _is.read(sOut, 2, true);
                        setResponseContext(msg->response.context);

                        callback_RPCTransMessage(_ret, sOut);

                    }
                    catch(std::exception &ex)
                    {
                        callback_RPCTransMessage_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_RPCTransMessage_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef tars::TC_AutoPtr<MServiceDeviceTCPGWCoroPrxCallback> MServiceDeviceTCPGWCoroPrxCallbackPtr;


    // 客户端的proxy
    /* proxy for client */
    class MServiceDeviceTCPGWProxy : public tars::ServantProxy
    {
    public:
        typedef map<string, string> TARS_CONTEXT;

        // 同步 这个context在调用的时候并没有传入 初始化一个map<string, string>的map 作为context
        tars::Int32 RPCGetEndPointInfo(std::string &sRsp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            // 写入sRsp
            _os.write(sRsp, 1);
            // 由RequestF.tars编译得出
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            //调用
            tars_invoke(tars::TARSNORMAL,"RPCGetEndPointInfo", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            // 解析回复
            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(sRsp, 1, true);
            return _ret;
        }

        // 异步
        void async_RPCGetEndPointInfo(MServiceDeviceTCPGWPrxCallbackPtr callback,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"RPCGetEndPointInfo", _os.getByteBuffer(), context, _mStatus, callback);
        }

        // promise异步
        promise::Future< MServiceDeviceTCPGWPrxCallbackPromise::PromiseRPCGetEndPointInfoPtr > promise_async_RPCGetEndPointInfo(const map<string, string>& context)
        {
            promise::Promise< MServiceDeviceTCPGWPrxCallbackPromise::PromiseRPCGetEndPointInfoPtr > promise;
            MServiceDeviceTCPGWPrxCallbackPromisePtr callback = new MServiceDeviceTCPGWPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"RPCGetEndPointInfo", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        // 协程异步
        void coro_RPCGetEndPointInfo(MServiceDeviceTCPGWCoroPrxCallbackPtr callback,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"RPCGetEndPointInfo", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        MServiceDeviceTCPGWProxy* tars_hash(int64_t key)
        {
            return (MServiceDeviceTCPGWProxy*)ServantProxy::tars_hash(key);
        }

        MServiceDeviceTCPGWProxy* tars_consistent_hash(int64_t key)
        {
            return (MServiceDeviceTCPGWProxy*)ServantProxy::tars_consistent_hash(key);
        }

        MServiceDeviceTCPGWProxy* tars_set_timeout(int msecond)
        {
            return (MServiceDeviceTCPGWProxy*)ServantProxy::tars_set_timeout(msecond);
        }

    };
    typedef tars::TC_AutoPtr<MServiceDeviceTCPGWProxy> MServiceDeviceTCPGWPrx;


    // 服务端的servant
    /* servant for server */
    class MServiceDeviceTCPGW : public tars::Servant
    {
    public:
        virtual ~MServiceDeviceTCPGW(){}
        virtual tars::Int32 RPCGetDevicesList(vector<Base::ClientInfo> &clis,tars::TarsCurrentPtr current) = 0;
        static void async_response_RPCGetDevicesList(tars::TarsCurrentPtr current, tars::Int32 _ret, const vector<Base::ClientInfo> &clis)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("clis", clis);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(clis, 1);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 RPCGetEndPointInfo(std::string &sRsp,tars::TarsCurrentPtr current) = 0;
        static void async_response_RPCGetEndPointInfo(tars::TarsCurrentPtr current, tars::Int32 _ret, const std::string &sRsp)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("sRsp", sRsp);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(sRsp, 1);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 RPCGetRedirectionURL(const std::string & index,tars::Int32 indexType,const std::string & URLType,Base::CommonResponse &sOut,tars::TarsCurrentPtr current) = 0;
        static void async_response_RPCGetRedirectionURL(tars::TarsCurrentPtr current, tars::Int32 _ret, const Base::CommonResponse &sOut)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("sOut", sOut);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(sOut, 4);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 RPCTransMessage(const Base::PlatformMsg & sIn,Base::CommonResponse &sOut,tars::TarsCurrentPtr current) = 0;
        static void async_response_RPCTransMessage(tars::TarsCurrentPtr current, tars::Int32 _ret, const Base::CommonResponse &sOut)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("sOut", sOut);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(sOut, 2);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

    public:
        int onDispatch(tars::TarsCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __LSFreeIP__MServiceDeviceTCPGW_all[]=
            {
                "RPCGetDevicesList",
                "RPCGetEndPointInfo",
                "RPCGetRedirectionURL",
                "RPCTransMessage"
            };

            pair<string*, string*> r = equal_range(__LSFreeIP__MServiceDeviceTCPGW_all, __LSFreeIP__MServiceDeviceTCPGW_all+4, _current->getFuncName());
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __LSFreeIP__MServiceDeviceTCPGW_all)
            {
                case 0:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    vector<Base::ClientInfo> clis;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.getByDefault("clis", clis, clis);
                    }
                    else
                    {
                        _is.read(clis, 1, false);
                    }
                    tars::Int32 _ret = RPCGetDevicesList(clis, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("clis", clis);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(clis, 1);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string sRsp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.getByDefault("sRsp", sRsp, sRsp);
                    }
                    else
                    {
                        _is.read(sRsp, 1, false);
                    }
                    tars::Int32 _ret = RPCGetEndPointInfo(sRsp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("sRsp", sRsp);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(sRsp, 1);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string index;
                    tars::Int32 indexType;
                    std::string URLType;
                    Base::CommonResponse sOut;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("index", index);
                        tarsAttr.get("indexType", indexType);
                        tarsAttr.get("URLType", URLType);
                        tarsAttr.getByDefault("sOut", sOut, sOut);
                    }
                    else
                    {
                        _is.read(index, 1, true);
                        _is.read(indexType, 2, true);
                        _is.read(URLType, 3, true);
                        _is.read(sOut, 4, false);
                    }
                    tars::Int32 _ret = RPCGetRedirectionURL(index,indexType,URLType,sOut, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("sOut", sOut);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(sOut, 4);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    Base::PlatformMsg sIn;
                    Base::CommonResponse sOut;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("sIn", sIn);
                        tarsAttr.getByDefault("sOut", sOut, sOut);
                    }
                    else
                    {
                        _is.read(sIn, 1, true);
                        _is.read(sOut, 2, false);
                    }
                    tars::Int32 _ret = RPCTransMessage(sIn,sOut, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("sOut", sOut);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(sOut, 2);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }
    };


}



#endif
